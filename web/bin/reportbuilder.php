<?php
/* This class provides functions for assembing a Report.
	Input sanitization is done here.
 */

include_once (dirname(__FILE__) . '/model/clip.php');
include_once (dirname(__FILE__) . '/model/report.php');
include_once (dirname(__FILE__) . '/model/song.php');
include_once (dirname(__FILE__) . '/supportfuncs.php');

class ReportBuilder {
	var $report;
	var $mysqli;
	var $isSongAmbiguous;
	
	/* Constructor. Creates an empty Report object. */
	public function ReportBuilder ($sqli) {
		error_log ("ReportBuilder constructor");
		if (is_null($sqli))
			throw new Exception ("reportbuilder.php: null mysqli object");
		$this->mysqli = $sqli;
		dumpVar($this->mysqli);
		$this->report = new Report();
		$this->isSongAmbiguous = false;
	}

	/* Populate the report from a POST array, as generated by idform.php */
	public function populate ($postarray) {
		error_log ("populate");
		$clipId = $_POST["clipid"];
		$clip = null;
		if ($clipId != null && ctype_digit($clipId)) {
			dumpVar($this->mysqli);
			error_log ("calling Clip.findById");
			$clip = Clip::findById($this->mysqli, $clipId);	
			error_log ("returned from Clip.findById");
		}
		if (is_null($clip)) {
			error_log ("No clip with ID $clipId");
			throw new Exception ("Invalid form, no clip specified");
		}
		$this->report->clip = $clip;
		$tracktype = trim($this->mysqli->real_escape_string($_POST['tracktype']));
		switch ($tracktype) {
			case "performance":
				$this->doPerformance();
				break;
			case "chatter":
				$this->doChatter();
				break;
			case "noise":
				$this->doNoise();
				break;
			default:
				throw new Exception ("Invalid form, wrong tracktype");
		}
		$this->report->setSoundType($tracktype);
	}
	
	/* Fill out the report if the user selected Performance */	
	private function doPerformance() {
		error_log ("doPerformance");
		$title = trim(strip_unsafe_html_tags($this->mysqli->real_escape_string($_POST["songtitle"])));
		if (strlen($title) > 0) {
			// Really is safe! strlen returns 0 for null object.
			$songs = Song::findByTitle ($this->mysqli, $title);
			// How do we deal with 2 songs by the same title?
			// TODO If we detect an ambiguity, set isSongAmbiguous to true
			// and keep going as far as we can.
			// As a TEMPORARY measure, pick the first song.
			$song = null;
			if (sizeof($songs) > 0)
				$song = $songs[0];
			if (is_null($song)) {
				$song = new Song ();
				$song->title = $title;
				$song->insert($this->mysqli);
			}
			$this->report->song = $song;
		}
		// TODO performers, instruments, etc.
}

	/* Fill out the report if the user selected Chatter */
	function doChatter() {

	}

	/* Fill out the report if the user selected Other/Noise/Silence */
	function doNoise() {
	}
	
	/* Insert the object into the database. */
	public function insert () {
		if (!$this->report->insert ($this->mysqli)) {
			throw new Exception ("Failed to insert report into database");
		}
	}
}
?>